//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "sqlite"
    url = "file:dev.db"
}

generator client {
    provider = "prisma-client-js"
    output = "../.prisma/client"
}

/// @@allow('create', true)
/// @@allow('read', memberships?[org.members?[user == auth()]])
/// @@allow('all', auth() == this)
model User {
    id Int @id() @default(autoincrement())
    name String
    reputation Int @default(1)
    memberships OrgMember[]
    ownedResources Resource[]
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members?[user == auth()])
/// @@allow('update,delete', members?[user == auth() && role == 'ADMIN'])
model Org {
    id Int @id() @default(autoincrement())
    name String
    members OrgMember[]
    resources Resource[]
}

/// @@deny('all', auth() == null)
/// @@allow('create,update,delete', org.members?[user == auth() && role == 'ADMIN'])
/// @@allow('read', org.members?[user == auth()])
model OrgMember {
    id Int @id() @default(autoincrement())
    org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    role String
}

/// @@deny('all', auth() == null)
/// @@allow('read', owner == auth() || (org.members?[user == auth()] && public))
/// @@allow('create', owner == auth() && org.members?[user == auth()])
/// @@allow('update', owner == auth() && future().owner == owner)
/// @@allow('delete', owner == auth())
model Resource {
    id Int @id() @default(autoincrement())
    name String
    public Boolean @default(false)
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId Int
    org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId Int
}